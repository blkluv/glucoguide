from redis import Redis

from fastapi import APIRouter, Depends, Security

from sqlalchemy.ext.asyncio import AsyncSession

from app.models import Patient
from app.db import get_async_db as db
from app.core.dependecies import include_auth, cache
from app.schemas.medication import (
    UpdateMedication,
    GenerateMedication,
)
from app.services.medication import MedicationService


router = APIRouter()


@router.get("/suggestions")
async def retrieve_patient_medications(
    session_user: Patient = Security(
        include_auth, scopes=["patient:read", "medication:read"]
    ),
    db: AsyncSession = Depends(db),
    redis: Redis = Depends(cache),
):
    """
    Retrieve a list of medications for the currently logged-in patient.
    -------------------------------------------------------------------

    Parameters:
    -----------
    - session_user (Patient): The authenticated patient making the request, authorized with the required security scopes ["patient:read", "medication:read"].
    - db (AsyncSession): The asynchronous database session used for querying and retrieving medication data.
    - redis (Redis): The Redis instance used for caching to optimize performance and reduce database load.

    Returns:
    --------
    - List of medications retrieved for the patient, fetched using the MedicationService.

    """

    return await MedicationService.get_patient_medications(session_user, db, redis)


@router.post("/generate")
async def generate_suggestions(
    payload: GenerateMedication,
    session_user: Patient = Security(
        include_auth,
        scopes=[
            "patient:read",
            "medication:read",
            "medication:write",
        ],
    ),
    db: AsyncSession = Depends(db),
    redis: Redis = Depends(cache),
):
    """
    Generate medication suggestions for the logged-in patient.
    ----------------------------------------------------------

    Parameters:
    -----------
    - payload (GenerateMedication): The input payload containing the required data for generating medication suggestions.
    - session_user (Patient): The authenticated patient initiating the request, authorized with the required security scopes ["patient:read", "medication:read", "medication:write"].
    - db (AsyncSession): The asynchronous database session used for executing database operations.
    - redis (Redis): The Redis instance used for caching to improve performance and reduce database load.

    Returns:
    --------
    - The result of the medication suggestions generated by the system, processed using the `MedicationService`.

    """

    return await MedicationService.generate_by_system(payload, session_user, db, redis)


@router.get("/appointment")
async def retrieve_apponintment_medications(
    id: str,
    _: Patient = Security(
        include_auth, scopes=["patient:read", "appointment:read", "medication:read"]
    ),
    db: AsyncSession = Depends(db),
    redis: Redis = Depends(cache),
):
    """
    Retrieve medications associated with a specific appointment ID.
    --------------------------------------------------------------

    Parameters:
    -----------
    - id (str): The unique identifier of the appointment for which medications are to be retrieved.
    - _ (Patient): The authenticated patient making the request, authorized with the required security scopes ["patient:read", "appointment:read", "medication:read"].
    - db (AsyncSession): The asynchronous database session used for executing database queries.
    - redis (Redis): The Redis instance used for caching to enhance performance and reduce database load.

    Returns:
    --------
    - The medications associated with the specified appointment, retrieved using the `MedicationService`.

    """

    return await MedicationService.appointment_medication_by_id(id, db, redis)


@router.put("/suggestions")
async def update_patient_medication(
    payload: UpdateMedication,
    id: str | None = None,
    session_user: Patient = Security(
        include_auth,
        scopes=[
            "patient:read",
            "medication:read",
            "medication:update",
        ],
    ),
    db: AsyncSession = Depends(db),
    redis: Redis = Depends(cache),
):
    """
    Update medication details for the logged-in patient.
    ----------------------------------------------------

    Parameters:
    -----------
    - payload (UpdateMedication): The input payload containing the updated medication details.
    - id (str | None): The unique identifier of the medication to be updated. If not provided, a default behavior must be handled by the service.
    - session_user (Patient): The authenticated patient making the request, authorized with the required security scopes ["patient:read", "medication:read", "medication:update"].
    - db (AsyncSession): The asynchronous database session used for executing update operations.
    - redis (Redis): The Redis instance used for caching to optimize performance and reduce database load.

    Returns:
    --------
    - The result of the updated medication details, processed using the `MedicationService`.

    """

    return await MedicationService.update_patient_medications(
        payload, session_user, id, db, redis
    )


@router.delete("/appointment")
async def delete_appointment_medications(
    id: str,
    session: Patient = Security(
        include_auth,
        scopes=[
            "patient:read",
            "appointment:read",
            "medication:read",
            "medication:delete",
        ],
    ),
    db: AsyncSession = Depends(db),
    redis: Redis = Depends(cache),
):
    """
    Delete medications associated with a specific appointment ID.
    ------------------------------------------------------------

    Parameters:
    -----------
    - id (str): The unique identifier of the appointment whose medications are to be deleted.
    - session (Patient): The authenticated patient making the request, authorized with the required security scopes ["patient:read", "appointment:read", "medication:read", "medication:delete"].
    - db (AsyncSession): The asynchronous database session used for executing delete operations.
    - redis (Redis): The Redis instance used for caching to improve performance and synchronize data.

    Returns:
    --------
    - Confirmation of successful deletion of the medications associated with the specified appointment, processed using the `MedicationService`.

    """

    return await MedicationService.delete_patient_medications(session, id, db, redis)
